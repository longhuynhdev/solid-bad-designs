@startuml

class ConsolePrinter {
    +void Print(ShoppingCart cart)
}

class ShoppingCart {
    - List<ShoppingCartItem> items
    + IEnumerable<ShoppingCartItem> Items
    + void Add(ShoppingCartItem item)
    + void Remove(ShoppingCartItem item)
    + void Clear()
    + double GetTotal()
}

class FileStorage{
    -string fileName
    +ShoppingCart? Load()
    +void Save(ShoppingCart cart)
}

class OnlineStore {
    - readonly ConsolePrinter printer
    - readonly FileStorage storage
    + ShoppingCart Cart
    + void Save()
    + void Load()
    + void Print()
}

class ShoppingCart {
    - List<ShoppingCartItem> items
    + IEnumerable<ShoppingCartItem> Items
    + void Add(ShoppingCartItem item)
    + void Remove(ShoppingCartItem item)
    + void Clear()
    + dobule GetTotal()

}

class ShoppingCartItem {
    +int ProductId
    +int Quantity
    +string? Title
    +double Price
}



' Relations between classes
ShoppingCart ..> ShoppingCartItem : uses
ConsolePrinter ..> ShoppingCart : uses
FileStorage ..> ShoppingCart : uses

OnlineStore o-- ShoppingCart : contains
OnlineStore o-- ConsolePrinter : contains
OnlineStore o-- FileStorage : contains

note right of OnlineStore 
    **Vi phạm nguyên tắc Dependency Inversion:**
    - OnlineStore phụ thuộc trực tiếp vào các lớp cụ thể (ConsolePrinter, FileStorage)
    - Điều này tạo ra sự ràng buộc chặt chẽ (tight coupling)
    - Khó mở rộng và thay đổi implementation
    - Nên phụ thuộc vào interface/abstraction thay vì class cụ thể
end note

@enduml
